#include "XRLFunctions.h"
#include "windows.h"
// on linux use dlfcn.h instead of windows.h

/*
 * we are using the xraylib library dll file
 * see T. Schoonjans, A. Brunetti, B. Golosio, M. Sanchez del Rio, 
 * V. A. Solé, C. Ferrero and L. Vincze, "The xraylib library for X-ray--matter interactions. 
 * Recent developments", Spectrochimica Acta B 66 (2011) 776-784
 * and https://github.com/tschoonj/xraylib
 * for more details
 */

double XRLFunctions::xrlCSTotal(int Z,double energy) {
    
    typedef float (*xraylibPointer)(int,float);
    HINSTANCE xraylibDLL = LoadLibrary("libxrl.dll");
    xraylibPointer xraylibFunction;
    
    xraylibFunction = (xraylibPointer)GetProcAddress(xraylibDLL,"CS_Total");
    
    return (double)xraylibFunction(Z, (float)energy);
}


double XRLFunctions::xrlCSFluorLineKissel(int Z, int xrlint, double energy) {
    
    typedef float (*xraylibPointer)(int,int,float);
    HINSTANCE xraylibDLL = LoadLibrary("libxrl.dll");
    xraylibPointer xraylibFunction;
    
    xraylibFunction = (xraylibPointer)GetProcAddress(xraylibDLL,"CS_FluorLine_Kissel");
    
    return (double)xraylibFunction(Z, xrlint,(float)energy);
    
}


double XRLFunctions::xrlLineEnergy(int Z, int xrlint) {
    
    typedef float (*xraylibPointer)(int,int);
    HINSTANCE xraylibDLL = LoadLibrary("libxrl.dll");
    xraylibPointer xraylibFunction;
    
    xraylibFunction = (xraylibPointer)GetProcAddress(xraylibDLL,"LineEnergy");
    
    return (double)xraylibFunction(Z, xrlint);
}


